# Default values for Shannon.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# protocol string refers to the decentralized framework that enables applications
# to access reliable and censorship-resistant infrastructure (e.g. shannon or morse).
protocol: shannon

# network string refers to the different stages of the protocol testing phase
# before it goes live to on the Mainnet. (e.g. mainnet, testnet, devnet)
#
# see https://dev.poktroll.com/category/networks
network: mainnet

# version string refers to the unique version of the poktrolld computer
# software.
#
# see https://dev.poktroll.com/operate/faq/full_node_faq?_highlight=version#how-do-i-check-the-node-version
version: 0.0.11-rc

# homeDirectory refers to the poktrolld working directory. This variable is
# shared across all every procol actors. Meaning that the working directory
# will be instantiated in the same path for every 
homeDirectory: /home/pocket/.poktroll

# shannon object refers to the root level values configuration for the shannon
# protocol to define the configuration for every protocol actors. This
# field is required when `.Values.protocol=shannon`.
#
# see https://dev.poktroll.com/category/protocol-actors for more information.
shannon:
  # relayminer key-value pairs refers to the relayminer configuration.
  relayminer:
    # chainId string refers to pocket network unique identifier for a blockchain
    # network within the Cosmos ecosystem.
    chainId: "poktroll"
    # grpcInsecure allows gRPC over insecure channels for querying state in the CosmosSDK.
    #
    # see https://dev.poktroll.com/operate/cheat_sheets/supplier_cheatsheet#secure-vs-non-secure-query_node_grpc_url
    grpcInsecure: true
    # gasAdjustment refers to the adjustement factor to be multiplied by the gas
    # estmiation given by the tx simulation.
    #
    # see https://docs.cosmos.network/main/learn/beginner/tx-lifecycle#gas-and-fees
    gasAdjustment: 1.5
    # gasPrices specifies how much you are willing to pay per unit of gas.
    #
    # see https://docs.cosmos.network/main/learn/beginner/tx-lifecycle#gas-and-fees
    gasPrices: 0.0001upokt
    # keyringBackend refers the storage backend for the keyring implementation.
    #
    # see https://docs.cosmos.network/v0.46/run-node/keyring.html#available-backends-for-the-keyring
    keyringBackend: test
    # logs refers to the logging configuration
    logs:
      # level defines the log severity.
      #
      # see https://github.com/pokt-network/poktroll/blob/6759eec9f586358a12306fa8c92d18cb03ef6530/pkg/polylog/polyzero/levels.go#L39-L54
      level: info
    # keysSecretName injects a Kubernetes Secret that defines the signing key
    # inside the relayminer pod.
    keysSecretName: "poktrolld-keys"
    # config defines key-values pairs for the relayminer general configuration.
    #
    # see https://dev.poktroll.com/operate/configs/relayminer_config
    config:
      signing_key_name: supplier1
      # default_signing_key_names defines the list of key names from the keyring.
      # 
      # https://dev.poktroll.com/operate/configs/relayminer_config
      default_signing_key_names: [supplier1]
      # smt_store_path path to working directory for Sparse Merkle Tree.
      smt_store_path: /.poktroll/smt
      # pocket_node defines the different connectivity for the poktrolld node.
      #
      # see https://dev.poktroll.com/operate/configs/relayminer_config#pocket-node-connectivity
      pocket_node:
        # query_node_rpc_url sets the websocket connection to a pocket network node.
        #
        # see https://dev.poktroll.com/operate/configs/relayminer_config#query_node_rpc_url
        query_node_rpc_url: tcp://validator-poktroll-validator:26657
        # query_node_grpc_url sets the pocket node endpoint to read from Pocket Network.
        #
        # see https://dev.poktroll.com/operate/configs/relayminer_config#query_node_rpc_url
        query_node_grpc_url: tcp://validator-poktroll-validator:9090
        # tx_node_rpc_url sets the pocket node endpoint to write into Pocket Network.
        #
        # see https://dev.poktroll.com/operate/configs/relayminer_config#tx_node_rpc_url
        tx_node_rpc_url: tcp://validator-poktroll-validator:26657
      # suppliers defines a list of key-values pairs to define the suppliers managed
      # by this relayminer.
      #
      # e.g.
      # suppliers:
      #   - service_id: ollama
      #     service_config:
      #      backend_url: http://ollama:8547/
      #      publicly_exposed_endpoints:
      #        - relayminers
      #     listen_url: http://0.0.0.0:8546
      #   - service_id: anvil
      #     service_config:
      #      backend_url: http://anvil:8547/
      #      publicly_exposed_endpoints:
      #        - relayminers
      #     listen_url: http://0.0.0.0:8546
      #
      # see https://dev.poktroll.com/operate/configs/relayminer_config#suppliers
      suppliers:
        # service_id is a unique identifier to reference a service provided by
        # this relayminer.
      - service_id: anvil
        # service_config configures the supplier of this service.
        #
        # see https://dev.poktroll.com/operate/configs/relayminer_config#service_config
        service_config:
          # backend_url is the endpoint where the request will be forward for
          # this service.
          backend_url: http://anvil:8547/
          # publicly_exposed_endpoints are a list of host the relayminer will
          # accept request from.
          publicly_exposed_endpoints:
            - relayminer1
        # listen_url is the address from which the relayminer will start a
        # server to listen for incoming request for this service.
        #
        # see https://dev.poktroll.com/operate/configs/relayminer_config#listen_url
        listen_url: http://0.0.0.0:8545
      # metrics configures a Prometheus Exporter server for promtheus exporters to
      # read relayminer metrics.
      metrics:
        # enabled activates a Prometheus Exporter endpoint if set to true.
        enabled: true
        # addr is the address at which the server must listen to.
        addr: :9090
      # pprof configures a pprof endpoint for visualization and analysis of
      # profiling data.
      pprof:
        # enabled activates a pprof endpoint.
        enabled: true
        # addr is the address at which the server must listen to.
        addr: localhost:6060
      # ping configures a ping healh check server to test the connectivity of all backend URLs
      # https://dev.poktroll.com/operate/configs/relayminer_config#ping
      ping:
        # enabled activates the ping server.
        enabled: false
        # addr is the address at which the server must listen.
        addr: localhost:8081
    # prometheus is the root value configuration for prometheus operator.
    prometheus:
      # serviceMonitor represents the configuration for a Prometheus Operator
      # ServiceMonitor.
      serviceMonitor:
        # enabled activates the templating of a Prometheus Operator
        # ServiceMonitor.
        enabled: true
    # development are the globals settings to set up an development environment
    # on the relayminer pod.
    development:
      # delve configures a debugger for the Go programming language. Keep in
      # mind that debugging may be challenging if the binary was compiled
      # with optimizations and inlining enabled.
      #
      # see https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv_exec.md
      delve:
        # enables executes the poktrolld binary with delve.
        enabled: false
        # addr is the address where the delve server listen to.
        addr: :40004
        # headless runs debug server only, in headless mode.
        headless: true
        # apiVersion selects JSON-RPC API version when headless.
        apiVersion: 2
        # acceptMulticlient allows a headless server to accept multiple client
        # connections via JSON-RPC or DAP.
        acceptMulticlient: true
    # image is the root configuration for the container image to be used for the
    # relayminer.
    image:
      # repository defines which container image will be pulled from a container
      # registry.
      repository: ghcr.io/pokt-network/poktrolld
     # pullPolicy defines the pull policy for the relayminer.
      pullPolicy: IfNotPresent
      # tag overrides the image tag whose default is the chart appVersion.
      tag: "latest"
    # replicas defines the number of instances for the relayminer.
    replicas: 1
    # imagePullSecrets defines the information to authenticate with the
    # container registry.
    imagePullSecrets: []
    # resources is the root configuration for the resource isolation.
    resources:
      # preset defines the resource pre-configuration (cpu and memory) for the
      # relayminer (small, medium, large or none). If one or more values are
      # defined in .shannon.relayminer.resources.requests or
      # .shannon.relayminer.resources.limits, the preset pre-configuration is
      # discarded.
      preset: none
      # requests defines the minimum resources a container needs to run.
      requests:
        # cpu defines the cpu minimum resources.
        cpu: 2000m
        # memory defines the memory minimum resources.
        memory: 2Gi
      # limits defines the maximum resources a container can use.
      limits:
        # cpu defines the cpu maximum resource.
        cpu: 3000m
        # memory defines the memory maximum resource.
        memory: 3Gi
    # service is the root configuration when defining a Kubernetes Service object for the relayminer.
    service:
      # type defines the type of service we want to use for the relayminer servers
      # (ClusterIP, NodePort, etc...).
      #
      # see https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
      type: ClusterIP
    # volumes are the additional volume for the relayminer pod.
    volumes: []
    # volumeMounts are the additional volume mount point for the relayminer pod.
    #
    # e.g.
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true
    volumeMounts: []
    # livenessProbe configures the mechanism that checks whether the relayminer
    # container is still up and running.
    livenessProbe:
      # ping configures a HTTP request as a probe against the ping server in the relayminer.
      # Make sure to active the ping service in .shannon.relayminer.config.ping
      # https://dev.poktroll.com/operate/configs/relayminer_config#ping
      ping:
        # enabled activates the http client to request the ping server.
        enabled: true
    # autoscaling ist the root configuration for the HorizontalPodAutoscaler.
    autoscaling:
      # enable activates the templating of a HorizontalPodAutoscaler resource.
      enabled: false
      # minReplicas defines the minimum number of replicas that should be maintained.
      minReplicas: 1
      # maxReplicas defines the maximum number of replicas that the HPA can
      # scale up to when the demand increases.
      maxReplicas: 100
      # targetCPUUtilizationPercentage defines the percentage of requested CPU
      # usage across all pods.
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage defines the percentage of requested
      # memory usage across all pods.
      targetMemoryUtilizationPercentage: 80
    # podAnnotations are key-values pairs metadata attched to Pods.
    #
    # e.g.
    # podAnnotations:
    #   version: "1.2.3"
    #   commitHash: "abc123def456"
    podAnnotations: {}
    # podSecurityContext are key-values pairs to define the security settings
    # for all containers within a pod.
    #
    # e.g
    # podSecurityContext
    #   runAsUser: 1000         # Run the Pod as user ID 1000
    #   runAsGroup: 3000        # Run the Pod as group ID 3000
    #   fsGroup: 2000           # Set file system group ownership to 2000
    podSecurityContext: {}
    # initContainersSecurityContext are key-values pairs to define the
    # security settings for all init containers. This field overwrites
    # the podSecurityContext settings if any defined.
    #
    # e.g
    # initContainers:
    #   enabled: true
    #   runAsUser: 1000         # Run the Pod as user ID 1000
    #   runAsGroup: 3000        # Run the Pod as group ID 3000
    #   fsGroup: 2000           # Set file system group ownership to 2000
    initContainersSecurityContext:
      enabled: true
      runAsUser: 1025
      runAsGroup: 1025
    # securityContext are key-values pairs to define the security settings
    # for the relayminer container. This field overwrites the podSecurityContext
    # settings if any defined.
    #
    # e.g.
    # capabilities:
    #     drop:
    #     - ALL
    #   readOnlyRootFilesystem: true
    #   runAsNonRoot: true
    #   runAsUser: 1000
    containersSecurityContext: {}
    # nodeSelector are key-values pairs to schedule the relayminer pod on a
    # specific node based on labels.
    nodeSelector: {}
    # affinity defines the settings for complex scheduling preferences.
    affinity: {}
    # tolerations defines policies for taints.
    tolerations: []
